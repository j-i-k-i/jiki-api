#!/usr/bin/env ruby

ENV['RAILS_ENV'] ||= 'development'

require 'bundler/setup'
require 'jiki-config'

# Validate required flag
deploy_mode = ARGV[0]
unless ['--deploy-missing', '--deploy-all'].include?(deploy_mode)
  puts "Error: Required flag missing"
  puts ""
  puts "Usage: bin/deploy-lambdas [--deploy-missing|--deploy-all]"
  puts ""
  puts "  --deploy-missing  Deploy only missing Lambda functions (skips existing)"
  puts "  --deploy-all      Force redeploy all Lambda functions (deletes and recreates)"
  puts ""
  exit 1
end

puts "=== Lambda Deployment (#{deploy_mode}) ==="
puts ""

# Check LocalStack is accessible
begin
  Jiki.lambda_client.list_functions
rescue StandardError => e
  puts "✗ LocalStack is not accessible"
  puts "  Error: #{e.message}"
  puts "  Make sure LocalStack is running"
  exit 1
end

# Define all Lambda functions that should be deployed
# Each Lambda's deploy script is expected at: services/video_production/{path}/scripts/deploy.rb
LAMBDAS = [
  {
    name: 'jiki-video-merger-development',
    path: 'video-merger',
    description: 'Video merger (FFmpeg)'
  }
  # Add more Lambda functions here as needed:
  # {
  #   name: 'jiki-audio-mixer-development',
  #   path: 'audio-mixer',
  #   description: 'Audio mixer (FFmpeg)'
  # }
]

deployed_count = 0
deleted_count = 0
skipped_count = 0
failed = false
force_deploy = (deploy_mode == '--deploy-all')

LAMBDAS.each do |lambda_config|
  name = lambda_config[:name]
  path = lambda_config[:path]
  description = lambda_config[:description]
  setup_script = "services/video_production/#{path}/scripts/deploy.rb"

  # Check if Lambda function exists
  lambda_exists = false
  begin
    Jiki.lambda_client.get_function(function_name: name)
    lambda_exists = true
  rescue Aws::Lambda::Errors::ResourceNotFoundException
    lambda_exists = false
  rescue StandardError => e
    puts "✗ Error checking #{description}: #{e.message}"
    failed = true
    break
  end

  # Handle based on mode
  if lambda_exists && force_deploy
    # Delete existing Lambda for redeployment
    print "Deleting #{description}... "
    begin
      Jiki.lambda_client.delete_function(function_name: name)
      puts "✓"
      deleted_count += 1
      lambda_exists = false
    rescue StandardError => e
      puts "✗"
      puts "  Error deleting Lambda function: #{e.message}"
      failed = true
      break
    end
  elsif lambda_exists && !force_deploy
    # Skip existing Lambda in deploy-missing mode
    puts "✓ #{description} (already deployed)"
    skipped_count += 1
    next
  end

  # Deploy Lambda if it doesn't exist (or was just deleted)
  unless lambda_exists
    puts ""
    puts "Deploying #{description} (this may take ~2 minutes on first run)..."
    puts ""

    # Run the setup script
    result = system(setup_script)

    if result
      puts ""
      puts "✓ #{description} deployed successfully"
      deployed_count += 1
    else
      puts ""
      puts "✗ Failed to deploy #{description}"
      failed = true
      break
    end
  end
end

puts ""
puts "=== Lambda Deployment Summary ==="
puts "  Deleted: #{deleted_count}" if force_deploy
puts "  Newly deployed: #{deployed_count}"
puts "  Skipped: #{skipped_count}" unless force_deploy
puts ""

if failed
  puts "✗ Lambda deployment failed"
  exit 1
else
  puts "✓ All Lambda functions ready"
end
