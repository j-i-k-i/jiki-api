# frozen_string_literal: true

require_relative 'input_schema_generator'

# rubocop:disable Rails/Output, Rails/Exit
module TypescriptGenerator
  class Generator
    def self.generate_all
      output_dir = Rails.root.join('typescript')

      puts "🔧 Generating TypeScript types..."
      puts "   Output: #{output_dir}"

      # Generate node input types
      InputSchemaGenerator.new(output_dir).generate

      # Update index.ts with current timestamp
      update_index_file(output_dir)

      # Build TypeScript package
      build_package(output_dir)

      puts "✨ TypeScript generation complete!"
    end

    def self.update_index_file(output_dir)
      content = <<~TS
        /**
         * @jiki/api-types
         * Auto-generated TypeScript types from Jiki Rails API
         *
         * DO NOT EDIT MANUALLY - Generated by rake typescript:generate
         * Generated at: #{Time.current.iso8601}
         */

        export * from './base';
        export * from './nodes';
      TS

      File.write(File.join(output_dir, 'src', 'index.ts'), content)
      puts "✅ Updated src/index.ts"
    end

    def self.build_package(output_dir)
      puts "📦 Building TypeScript package..."

      Dir.chdir(output_dir) do
        # Install dependencies if needed
        system('pnpm install') unless Dir.exist?('node_modules')

        # Build TypeScript
        result = system('pnpm build')

        if result
          puts "✅ TypeScript build successful"
        else
          puts "❌ TypeScript build failed"
          exit 1
        end
      end
    end

    def self.output_dir
      Rails.root.join('typescript')
    end
  end
end
# rubocop:enable Rails/Output, Rails/Exit
